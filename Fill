#pragma once
#include <iostream>
#include <ctime>
#include <windows.h>

using namespace std;

int player;
int flips = 0; // initialize the flips variable to 0
time_t startTime; // declare a variable to store the start time of the game
int player1Points = 0; // initialize the player1Points variable to 0
int player2Points = 0; // initialize the player2Points variable to 0

void switchPlayer(); // function prototype for switchPlayer
void playGame(char** field, char** values, int size); // function prototype for playGame
bool checkWin(char** field, int size); // function prototype for checkWin
void playerChoose(char** field, char** values, int size); // function prototype for playerChoose
void Display_the_field(char** field, int size); // function prototype for Display_the_field
void FillStars(char** field, int size); // function prototype for FillStars
void FillField(int size); // function prototype for FillField

// define the switchPlayer function
void switchPlayer() {
    if (player == 1) { // if the current player is 1
        player = 2; // switch to player 2
    }
    else {
        player = 1; // switch to player 1
    }
}

// define the playGame function
void playGame(char** field, char** values, int size) {
    startTime = time(NULL); // set the start time to the current time
    while (true) {
        playerChoose(field, values, size); // call the playerChoose function with the given arguments
        if (checkWin(field, size)) { // if the checkWin function returns true
            if (player1Points > player2Points) { // if player1Points is greater than player2Points
                cout << "Player 1 wins with " << player1Points << " points!" << endl; // print a message indicating that player 1 wins with their point total
            }
            else if (player2Points > player1Points) { // if player2Points is greater than player1Points
                cout << "Player 2 wins with " << player2Points << " points!" << endl; // print a message indicating that player 2 wins with their point total
            }
            else { // otherwise (if player1Points and player2Points are equal)
                cout << "It's a tie with " << player1Points << " points each!" << endl; // print a message indicating that it's a tie with each players' point total
            }
            break;
        }
    }
    time_t endTime = time(NULL); // set the end time to the current time
    cout << "Game time: " << endTime - startTime << " seconds" << endl; // print the game time by subtracting the start time from the end time and converting it to seconds
    cout << "Total flips: " << flips << endl; // print the total number of flips by accessing the flips variable
}

// define the checkWin function
bool checkWin(char** field, int size) {
    for (int i = 0; i < size; i++) { // loop through each row of the field array
        for (int j = 0; j < size; j++) { // loop through each column of the field array
            if (field[i][j] != ' ') { // if the current element is not equal to a space character
                return false; // return false (the game is not won yet)
            }
        }
    }
    return true; // if all elements are equal to a space character, return true (the game is won)
}

// define the playerChoose function
void playerChoose(char** field, char** values, int size) {
    int x1, y1;
    int x2, y2;
    cout << "Player " << player << ", enter first coordinates (x y): ";
    cin >> x1 >> y1;
    x1 = x1 - 1;
    y1 = y1 - 1;

    if (x1 >= 0 && x1 < size && y1 >= 0 && y1 < size) {
        if (field[x1][y1] == ' ') {
            cout << "This card has already been flipped!" << endl;
            return;
        }
        field[x1][y1] = values[x1][y1];
        Display_the_field(field, size);
        flips++;
    }
    else {
        cout << "Invalid coordinates!" << endl;
        return;
    }

    cout << "Player " << player << ", enter second coordinates (x y): ";
    cin >> x2 >> y2;
    x2 = x2 - 1;
    y2 = y2 - 1;

    if (x2 >= 0 && x2 < size && y2 >= 0 && y2 < size) {
        if (x1 == x2 && y1 == y2) {
            cout << "You cannot choose the same card twice!" << endl;
            field[x1][y1] = '*';
            Sleep(3000);
            system("cls");
            Display_the_field(field, size);
            return;
        }
        if (field[x2][y2] == ' ') {
            cout << "This card has already been flipped!" << endl;
            return;
        }
        field[x2][y2] = values[x2][y2];
        Display_the_field(field, size);
        flips++;

        if (values[x1][y1] == values[x2][y2]) {
            Beep(750, 300);
            field[x1][y1] = ' ';
            field[x2][y2] = ' ';
            Display_the_field(field, size);
            if (player == 1) { // if the current player is player 1
                player1Points += 10; // increment player1Points by 10
            }
            else { // otherwise (if the current player is player 2)
                player2Points += 10; // increment player2Points by 10
            }
        }
        else {
            Beep(300, 300);
            field[x1][y1] = '*';
            field[x2][y2] = '*';
            Sleep(2000);
            system("cls");
            Display_the_field(field, size);
            switchPlayer();
        }

    }
    else {
        cout << "Invalid coordinates!" << endl;
    }
}


// define the Display_the_field function
void Display_the_field(char** field, int size) {
    for (int i = 0; i < size; i++) {
        cout << "+";
        for (int k = 0; k < size; k++) {
            cout << "--+";
        }
        cout << endl;
        for (int j = 0; j < size; j++) {
            cout << "|" << field[i][j] << " ";
        }
        cout << "|" << endl;
    }
    cout << "+";
    for (int k = 0; k < size; k++) {
        cout << "--+";
    }
    cout << endl;
}

// define the FillStars function
void FillStars(char** field, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            field[i][j] = '*';
        }
    }
    Display_the_field(field, size);
}

// define the FillField function
void FillField(int size) {
    srand(time(NULL)); // initialize the random seed using the current time
    player = rand() % 2 + 1; // generate a random number between 1 and 2 and assign it to the player variable
    char** field = new char* [size]; // dynamically allocate memory for an array of pointers to char arrays (rows)
    char** values = new char* [size]; // dynamically allocate memory for an array of pointers to char arrays (rows)

    for (int i = 0; i < size; i++) { // loop through each row of the arrays
        field[i] = new char[size]; // dynamically allocate memory for a char array (column) in each row of the field array
        values[i] = new char[size]; // dynamically allocate memory for a char array (column) in each row of the values array
    }

    char letter = 'A'; // initialize a letter variable to 'A'
    char letter_2 = 'A'; // initialize a letter_2 variable to 'A'

    for (int i = 0; i < size; i++) { // loop through each row of the first half of the field array
        for (int j = 0; j < size / 2; j++) { // loop through each column of the first half of the field array
            field[i][j] = letter++; // set the current element of the field array to letter and increment letter by 1
        }
    }
    for (int i = 0; i < size; i++) { // loop through each row of the second half of the field array
        for (int j = size / 2; j < size; j++) { // loop through each column of the second half of the field array
            field[i][j] = letter_2++; // set the current element of the field array to letter_2 and increment letter_2 by 1
        }
    }

    for (int i = 0; i < size; i++) { // loop through each row of the field array
        for (int j = 0; j < size; j++) { // loop through each column of the field array
            int r1 = rand() % size; // generate a random number between 0 and size-1 and store it in r1
            int r2 = rand() % size; // generate a random number between 0 and size-1 and store it in r2
            char temp = field[i][j]; // store the current element of the field array in a temporary variable
            field[i][j] = field[r1][r2]; // set the current element of the field array to the element at the randomly generated coordinates
            field[r1][r2] = temp; // set the element at the randomly generated coordinates to the value stored in the temporary variable
        }
    }

    for (int i = 0; i < size; i++) { // loop through each row of the values array
        for (int j = 0; j < size; j++) { // loop through each column of the values array
            values[i][j] = field[i][j]; // set the current element of the values array to the corresponding element of the field array
        }
    }

    for (int i = 0; i < size; i++) { 
        cout << "+"; 
        for (int k = 0; k < size; k++) { 
            cout << "--+"; 
        }
        cout << endl; 
        for (int j = 0; j < size; j++) { 
            cout << "|" << field[i][j] << " "; 
        }
        cout << "|" << endl; 
    }
    cout << "+"; 
    for (int k = 0; k < size; k++) { 
        cout << "--+";
    }
    cout << endl; 
    Sleep(500); // pause execution for 500 milliseconds
    system("cls"); // clear the console

    FillStars(field, size); // call the FillStars function with the given arguments
    playGame(field, values, size); // call the playGame function with the given arguments
}
